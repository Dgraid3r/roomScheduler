
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;


public class RoomSchedulerFrame extends javax.swing.JFrame
{

    
    /**
     * Creates new form RoomSchedulerFrame
     */
    public RoomSchedulerFrame()
    {
        initComponents();
        
        // Load the combo boxes with data.
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
        rebuildRoomComboBoxes();
    }
    
    public void rebuildFacultyComboBoxes()
    {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));   
        cancelFaculty.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray())); 
        facultyStatus.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildRoomComboBoxes()
    {
        dropName.setModel(new javax.swing.DefaultComboBoxModel(roomqueries.getAllRooms().toArray()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelStatus = new javax.swing.JPanel();
        waitlistPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        addRoomName = new javax.swing.JTextField();
        addRoomSeats = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        addRoomButton = new javax.swing.JButton();
        dropName = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        dropRoomButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        dropRoomStatus = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        addRoomStatus = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<String>();
        jLabel6 = new javax.swing.JLabel();
        reserveSeatsTextField = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cancelFaculty = new javax.swing.JComboBox();
        cancelButton = new javax.swing.JButton();
        cancelDate = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        reserveRoomStatus = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        cancelOutput = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        reservationsByDate = new javax.swing.JButton();
        reservationStatusBox = new javax.swing.JComboBox<String>();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationOutput = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        waitlistButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        waitlist = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusOutput = new javax.swing.JTextArea();
        getStatusButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        facultyStatus = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        addDate = new javax.swing.JSpinner();
        addDateButton = new javax.swing.JButton();
        dateStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout cancelStatusLayout = new javax.swing.GroupLayout(cancelStatus);
        cancelStatus.setLayout(cancelStatusLayout);
        cancelStatusLayout.setHorizontalGroup(
            cancelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        cancelStatusLayout.setVerticalGroup(
            cancelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Faculty Name: ");

        addFacultyTextField.setColumns(20);

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("    ");

        jLabel7.setText("   ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(addFacultyButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addFacultyStatusLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(addFacultyButton)
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(414, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Add Faculty", jPanel1);

        jLabel13.setText("Room name");

        jLabel14.setText("Room capacity");

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        dropName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel15.setText("Room name");

        dropRoomButton.setText("Drop Room");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dropRoomStatus.setColumns(20);
        dropRoomStatus.setRows(5);
        jScrollPane4.setViewportView(dropRoomStatus);

        addRoomStatus.setColumns(20);
        addRoomStatus.setRows(5);
        jScrollPane5.setViewportView(addRoomStatus);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(115, 115, 115)
                                        .addComponent(dropName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dropRoomButton)
                                    .addComponent(addRoomButton)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(31, 31, 31)
                .addComponent(addRoomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(59, 59, 59)
                .addComponent(dropRoomButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Add/Drop Room", jPanel5);

        jLabel4.setText("Faculty: ");

        jLabel5.setText("Date: ");

        jLabel6.setText("Seats Required: ");

        reserveSeatsTextField.setColumns(3);

        reserveSubmitButton.setText("Reserve Room");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        reserveStatusLabel.setText("   ");

        jLabel9.setText("Faculty: ");

        jLabel10.setText("Date: ");

        cancelFaculty.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cancelButton.setText("Cancel Reservation");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        cancelDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        reserveRoomStatus.setText("Reservation Status : ");

        cancelOutput.setColumns(20);
        cancelOutput.setRows(5);
        jScrollPane6.setViewportView(cancelOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reserveStatusLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveRoomStatus)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4))
                                    .addGap(112, 112, 112)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(187, 187, 187))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(reserveSubmitButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(cancelButton)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addGap(136, 136, 136)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cancelFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(jLabel12)))
                        .addGap(0, 138, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(reserveSubmitButton)
                .addGap(3, 3, 3)
                .addComponent(reserveStatusLabel)
                .addGap(9, 9, 9)
                .addComponent(reserveRoomStatus)
                .addGap(59, 59, 59)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cancelFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cancelDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        waitlistPanel.addTab("Reservations", jPanel2);

        jLabel3.setText("See Reservations by date");

        reservationsByDate.setText("Submit");
        reservationsByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationsByDateActionPerformed(evt);
            }
        });

        reservationOutput.setColumns(20);
        reservationOutput.setRows(5);
        jScrollPane1.setViewportView(reservationOutput);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(reservationStatusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservationsByDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(reservationStatusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reservationsByDate)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Reservation Status", jPanel3);

        jLabel8.setText("See the current waitlist");

        waitlistButton.setText("Submit");
        waitlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistButtonActionPerformed(evt);
            }
        });

        waitlist.setColumns(20);
        waitlist.setRows(5);
        jScrollPane2.setViewportView(waitlist);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(380, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(waitlistButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(waitlistButton)
                .addContainerGap(496, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(93, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(139, Short.MAX_VALUE)))
        );

        waitlistPanel.addTab("Waitlist", jPanel4);

        statusOutput.setColumns(20);
        statusOutput.setRows(5);
        jScrollPane3.setViewportView(statusOutput);

        getStatusButton.setText("Submit");
        getStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStatusButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("See the current status of waitlist and reservations");

        facultyStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLabel16))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(facultyStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(getStatusButton))))
                        .addGap(0, 124, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(facultyStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(getStatusButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        waitlistPanel.addTab("Status", jPanel7);

        addDate.setModel(new javax.swing.SpinnerDateModel());

        addDateButton.setText("Add Date");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(197, Short.MAX_VALUE)
                .addComponent(addDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(addDateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(addDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(addDateButton)
                .addGap(49, 49, 49)
                .addComponent(dateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(329, Short.MAX_VALUE))
        );

        waitlistPanel.addTab("Add Date", jPanel6);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Room Scheduler");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(waitlistPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waitlistPanel)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void waitlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistButtonActionPerformed
        // it just outputs the waitlist here
        ArrayList<waitlistEntry> entries = waitlistQueries.getWaitlistByDate();
        String str = "Faculty\t Date\t  Seats\n";
        for(int i = 0; i < entries.size(); i++)
        {
            str+=entries.get(i).getFaculty() + "\t";
            str+=entries.get(i).getDate() + "\t";
            str +=entries.get(i).getSeats() + "\n";

        }
        waitlist.setText(str);
    }//GEN-LAST:event_waitlistButtonActionPerformed

    private void reservationsByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationsByDateActionPerformed
        ArrayList<reservationEntry> dates = reservationQueries.getReservationsByFaculty();
        //int az = reservationStatusBox.getSelectedIndex();
       // ArrayList<Date> findDate = Dates.getDateList();
        //Date day =  findDate.get(az);
        Date day = Date.valueOf(reservationStatusBox.getSelectedItem().toString());
        String str = "Faculty\t Room\n";
        for(int i = 0; i < dates.size(); i++)
        {
            if(day.equals(dates.get(i).getDate()))
            {
                str+=dates.get(i).getFaculty() + "\t";
                str +=dates.get(i).getRoom() + "\n";
            }
        }
        reservationOutput.setText(str);
    }//GEN-LAST:event_reservationsByDateActionPerformed

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // Add the faculty to the faculty table.
        String name = addFacultyTextField.getText();
        Faculty.addFaculty(name);
        addFacultyStatusLabel.setText(name+" has been added to the Faculty.");

        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        // TODO add your handling code here:
        //faculty member will be assigned a room for the requested date, if ther eare any seats available
        //they will be assigned to the smallest room that has enough seats for their request
        //if ther are no rooms available or no rooms with enough seats available, the faculty member will be put on the waitlist for that date
        String fac_name = reserveFacultyComboBox.getItemAt(reserveFacultyComboBox.getSelectedIndex());
        String seatz = reserveSeatsTextField.getText();
        int numSeats = Integer.valueOf(seatz);
        Date day = Date.valueOf(reserveDateComboBox.getSelectedItem().toString());
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        ArrayList<roomEntry> roms = roomqueries.getRoomsBySize();
        ArrayList<reservationEntry> reservation = reservationQueries.getReservationsByDate();
        int roomElement = 0;
        int waitlist = 0;
        String room = "";
        //figure out what rooms are free on the specific date
        if(reservation.isEmpty() == false)
        {
            for(int i = 0; i < reservation.size(); i++)
            {
                if(day.equals(reservation.get(i).getDate()))
                {
                    for(int j = 0; j < roms.size(); j++)
                    {
                        if(roms.get(j).getName().equalsIgnoreCase(reservation.get(i).getRoom()))
                        {
                            roms.remove(j);
                        }
                    }
                }
            }
        }
        //now we should have an arraylist of rooms that are free for the given date that is relatively sorted so we just need
        //to figure out which rooms work
        boolean add = false;
        for(int a = 0; a <roms.size(); a++)
        {
            if(roms.get(a).getSeats() >= numSeats)
            {
                //add it here and stop the loop
                room = roms.get(a).getName();
                reservationEntry temp = new reservationEntry(fac_name,room,day, numSeats, currentTimestamp);
                reservationQueries.addReservationEntry(temp);
                reserveRoomStatus.setText("Reservation Status : Reservation for " +fac_name + " has been added to the list");
                a = roms.size();
                add = true;
            }
        }
        if(add == false)
        {
            waitlistEntry wait = new waitlistEntry(fac_name, day, numSeats, currentTimestamp);
            waitlistQueries.addWaitlist(wait);
            reserveRoomStatus.setText("Reservation Status : Reservation failed.  You have been added to the waitlist");
        }
        
        if(roms.isEmpty() == true)
        {
        
        waitlistEntry wait = new waitlistEntry(fac_name, day, numSeats, currentTimestamp);
        waitlistQueries.addWaitlist(wait);
        reserveRoomStatus.setText("Reservation Status : Reservation failed.  You have been added to the waitlist");
        }
                                 
                                





        //if the room is not available(check with all elements in reservations), add to the waitlist or
        //if there are no rooms with enough seats available put them on the waitlist for that date
        if(waitlist == 2)
        {


        }
        else
        {
            //if there is no need to use the waitlist here
            

        }
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        String name = addRoomName.getText();
        int seats = Integer.valueOf(addRoomSeats.getText());
        roomEntry c = new roomEntry(name, seats);
        ArrayList<waitlistEntry> wait = new ArrayList<waitlistEntry>();
        ArrayList<Date> dayz = Dates.getDateList();
        roomqueries.addRoom(c);
        wait = waitlistQueries.getWaitlistByDate();
        String f;
        Date d;
        Timestamp t;
        int s;
        String str = "Room " + name +" was added and has " + seats + " seats." + "\n";
        for(int a = 0; a < dayz.size(); a++)
        {
            for(int b = 0; b< wait.size(); b++)
            {
                Date one = dayz.get(a);
                Date two = wait.get(b).getDate();
                if(dayz.get(a).equals(wait.get(b).getDate()))
                {
                    //if the date works out, we check the room size
                    if(seats >= wait.get(b).getSeats())
                    {
                        //now that the day and the seats work for this day, we make a reservation for it and take it off the waitlist
                        f = wait.get(b).getFaculty();
                        d = wait.get(b).getDate();
                        s = wait.get(b).getSeats();
                        t = wait.get(b).getTimestamp();
                        reservationEntry addz = new reservationEntry(f, name, d, s, t);
                        reservationQueries.addReservationEntry(addz);
                        waitlistQueries.deleteWaitlistEntry(wait.get(b));
                        str+=  "\n" + "  Additionally, " +f +" was taken off of the waitlist for " +d.toString() + " and reserved in this new room";
                    }
                }
                //if we add for a day, increment a so it doesnt hit the same date again
            }
        }
        //the waitlist must be searched for any faculty waiting for a room for all dates
	//that rooms are reserved and reserve the room for them + remove them from the waiting list
        addRoomStatus.setText(str);
        rebuildRoomComboBoxes();
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        //dropRoom handler
        //removes a room from the application Any faculty members that had this roomreservedfor any Datewill getanother roomreserved for that Date
	//if possible,in priority sequence,and the new reservationreported to the user. If the faculty membercannot get a new room reserved, the user
	//is informed that the faculty membercould not get a new room reserved and that they have been placed on the waitlist.
        String str = "";
        String name = dropName.getSelectedItem().toString();
        int seats = 0;
        ArrayList<roomEntry> rooms = roomqueries.getAllPossibleRooms();
        ArrayList<reservationEntry> entries = reservationQueries.getReservationsByDate();
        ArrayList<reservationEntry> relocate = new ArrayList<reservationEntry>();
        ArrayList<Date> datez = Dates.getDateList();
        boolean ctr = false;
        for(int a = 0; a < rooms.size(); a++)
        {
            if(rooms.get(a).getName().equals(name))
            {
                seats = rooms.get(a).getSeats();
            }
        }
        //try to relocate the reservations to other rooms
        //this is where the current logic error is i think
        roomEntry del = new roomEntry(name, seats);
        for(int b = 0; b < entries.size(); b++)
        {
            if(entries.get(b).getRoom().equals(name))
            {
                //we're assuming that each room in the building is unique and that there won't be 2 rooms with the same name
                //so if we find a reservation entry with the same room name as the one we're trying to drop, we store it temporarily in an arraylist
                relocate.add(entries.get(b));
                //add the reservation to a temporary list and delete the reservaiton
                reservationQueries.deleteReservation(entries.get(b));
                entries.remove(b);
            }
        }
        roomqueries.dropRoom(del);
        //sort the relocate list by priority(timestamp) with bubblesort
        int n = relocate.size();
        for(int x = 0; x < n-1; x++)
        {
            for(int y = 0; y < n-x-1; y++)
            {
                if(relocate.get(y).getTimestamp().compareTo(relocate.get(y+1).getTimestamp()) > 0)
                {
                    reservationEntry temp = relocate.get(y);
                    relocate.set(y, relocate.get(y+1));
                    relocate.set(y+1, temp);
                }
            }
        }
        //with a properly sorted(by timestamp) version of the relocate reservations list, priority is handled
        str = "Room " + name + " with " + seats +" has been dropped" + "\n";
        //now we attempt to relocate those reservation entries
        String nam = "";
        String newRom = "";
        Date dz;
        int sets = 0;
        Timestamp tz;
        int var;
        
        for(int c = 0; c < relocate.size(); c++)
        {
            //iterate through the items in relocate and see if we can fit them into a reservation in another room on that day
            //see if we can find an empty room in that day first that works
            nam = relocate.get(c).getFaculty();
            dz = relocate.get(c).getDate();
            sets = relocate.get(c).getSeats();
            tz = relocate.get(c).getTimestamp();
            ArrayList<roomEntry> free = roomqueries.getRoomsBySize();
            for(int d = 0; d< entries.size(); d++)
            {
                if(relocate.get(c).getDate().equals(entries.get(d).getDate()))
                {
                    for(int j = 0; j < free.size(); j++)
                    {
                        if(free.get(j).getName().equalsIgnoreCase(entries.get(d).getRoom()))
                        {
                            free.remove(j);
                        }
                    }
                }
            }
            //for each item we need to relocate, we make an arraylist of the free rooms on that date, then check to see
            //if the size works for any of these rooms
        int add = 0;
        for(int e = 0; e <free.size(); e++)
        {
            if(free.get(e).getSeats() >= relocate.get(c).getSeats())
            {
                //add it here and stop the loop
                newRom = free.get(e).getName();
                reservationEntry temp = new reservationEntry(nam,newRom,dz, sets, tz);
                reservationQueries.addReservationEntry(temp);
                str += "\n" + "The reservation for " + nam + " on " + dz + "has been relocated to " + newRom;
                var = free.size();
                add = 2;
            }
            else
            {
                add = 1;
            }
        }
        if(add == 1)
        {
            waitlistEntry wait = new waitlistEntry(nam, dz, sets, tz);
            waitlistQueries.addWaitlist(wait);
            str += "\n" + "The reservation for " + nam +" on " + dz + " has been added to the waitlist";
        }
        
        if(free.isEmpty() == true)
        {
        
        waitlistEntry wait = new waitlistEntry(nam, dz, sets, tz);
        waitlistQueries.addWaitlist(wait);
        str += "\n" + "The reservation for " + nam +" on " + dz + " has been added to the waitlist";
        }
        }

            
        
        dropRoomStatus.setText(str);
        rebuildRoomComboBoxes();
    }//GEN-LAST:event_dropRoomButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        //addDate handler
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(addDate.getValue());
        Date day = Date.valueOf(spinnerValue); 
        Dates.addDate(day);
        dateStatus.setText("The date " +day + " has been added");
        rebuildDateComboBoxes();
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        //delete faculty member reservation from resrvations or the waiting list	
	//when the reservation is removed from a room, check to see if another faculty member can be booked for the room for that date
       ArrayList<reservationEntry> entries1 = reservationQueries.getReservationsByFaculty();
       ArrayList<waitlistEntry> entries2 = waitlistQueries.getWaitlistByDate();
       String faculty = cancelFaculty.getSelectedItem().toString();
       Date day = Date.valueOf(cancelDate.getSelectedItem().toString());
       String room;
       Timestamp time;
       int seats;
       boolean add = false;
       String f;
       Date d;
       Timestamp t;
       int s;
       String str = "";
       for(int a = 0; a < entries1.size(); a++)
       {
           //search reservations for reservations made for faculty member on day
           if(faculty.equals(entries1.get(a).getFaculty()))
           {
               if(day.equals(entries1.get(a).getDate()))
               {
                   //match found, so remove from the reservations list
                   room = entries1.get(a).getRoom();
                   time = entries1.get(a).getTimestamp();
                   seats = entries1.get(a).getSeats();
                   reservationEntry del = new reservationEntry(faculty, room, day, seats, time);
                   reservationQueries.deleteReservation(del);
                   
                   str = "Cancellation Status: " + faculty + " was removed from their reservation on " + day.toString();
                   //now check the waiting list to see if another faculty member can be booked for the room on that date
                   for(int i = 0; i < entries2.size(); i++)
                   {
                       if(entries2.get(i).getSeats() <=  seats)
                       {
                           d = entries2.get(i).getDate();
                           f = entries2.get(i).getFaculty();
                           t =  entries2.get(i).getTimestamp();
                           s = entries2.get(i).getSeats();
                           reservationEntry replacement = new reservationEntry(f, room,d, s,t);
                           reservationQueries.addReservationEntry(replacement);
                           waitlistQueries.deleteWaitlistEntry(entries2.get(i));
                           str = "Cancellation Status: " + faculty + " was removed from their reservation on " + day.toString() + " and " + "\n" + f + " was taken off of the waitlist";
                           str += " and obtained this reservation slot";
                       }
                   }
               }
           }
       }
       //now do the same for the waitlist
       for(int b = 0; b < entries2.size(); b++)
       {
       //search waitlist for waitlist made for faculty member on day
           if(faculty.equals(entries2.get(b).getFaculty()))
           {
               if(day.equals(entries2.get(b).getDate()))
               {
                   room = entries1.get(b).getRoom();
                   time = entries1.get(b).getTimestamp();
                   seats = entries1.get(b).getSeats();
                   waitlistEntry del = new waitlistEntry(faculty, day, seats, time);
                   waitlistQueries.deleteWaitlistEntry(del);
                   str = "Cancellation Status: " + faculty + " was removed from the waitlist";
                   //do not need to check waitlist for a new spot because deleting from waitlist
               }
           }
       }
        
        cancelOutput.setText(str);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void getStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStatusButtonActionPerformed
        // TODO add your handling code here:
        //status
        ArrayList<reservationEntry> entries1 = reservationQueries.getReservationsByDate();
        ArrayList<waitlistEntry> entries2 = waitlistQueries.getWaitlistByDate();
        String faculty = facultyStatus.getSelectedItem().toString();
        String str = "Room\t Date\n";
        for(int i = 0; i < entries1.size(); i++)
        {
            if(faculty.equals(entries1.get(i).getFaculty()))
            {
                str+=entries1.get(i).getRoom() + "\t";
                str +=entries1.get(i).getDate() + "\n";
            }
        }
        for(int z = 0; z < entries2.size(); z++)
        {
            if(faculty.equals(entries2.get(z).getFaculty()))
            {
                str+= "waitlist" + "\t";
                str +=entries2.get(z).getDate() + "\n";
            }
        }
        statusOutput.setText(str);
    }//GEN-LAST:event_getStatusButtonActionPerformed

    
    public void rebuildDateComboBoxes()
    {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
        reservationStatusBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
        cancelDate.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDateList().toArray()));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RoomSchedulerFrame().setVisible(true);
            }
        });
    }
    private javax.swing.JComboBox<Date> reservationDateComboBox;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner addDate;
    private javax.swing.JButton addDateButton;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JTextField addFacultyTextField;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomName;
    private javax.swing.JTextField addRoomSeats;
    private javax.swing.JTextArea addRoomStatus;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cancelDate;
    private javax.swing.JComboBox cancelFaculty;
    private javax.swing.JTextArea cancelOutput;
    private javax.swing.JPanel cancelStatus;
    private javax.swing.JLabel dateStatus;
    private javax.swing.JComboBox dropName;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JTextArea dropRoomStatus;
    private javax.swing.JComboBox facultyStatus;
    private javax.swing.JButton getStatusButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea reservationOutput;
    private javax.swing.JComboBox<String> reservationStatusBox;
    private javax.swing.JButton reservationsByDate;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JLabel reserveRoomStatus;
    private javax.swing.JTextField reserveSeatsTextField;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JTextArea statusOutput;
    private javax.swing.JTextArea waitlist;
    private javax.swing.JButton waitlistButton;
    private javax.swing.JTabbedPane waitlistPanel;
    // End of variables declaration//GEN-END:variables
}
